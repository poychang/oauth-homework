@page "/"
@using System.Text.Json
@using LineOAuthWebApp.Models
@using System.Net.Http.Headers
@using LineOAuthWebApp.Services;
@inject IJSRuntime JS
@inject IHttpClientFactory httpClientFactory
@inject LineLoginService lineLoginService

<div class="text-center p-10">
    @if (User is null)
    {
        <h1 class="display-4">OAuth Homework</h1>
        <p>
            <a href="@lineLoginService.LineLoginUrl(clientId,redirectUri, Guid.NewGuid().ToString())">LINE Login</a>
        </p>
    }
    else
    {
        <p><img src="@User.PictureUrl" width="128" height="128" /></p>
        <h1 class="display-4">Hi, @User.DisplayName</h1>
        <h2>@User.Sub</h2>

        @if (IsLineNotifyBinded)
        {
            <a class="btn btn-warning">取消 Line Notify 通知</a>
        }
        else
        {
            <a class="btn btn-success">訂閱 Line Notify 通知</a>
        }
        <a class="btn btn-danger" @onclick="@Logout">登出</a>

        <pre class="text-left"><code>@JsonSerializer.Serialize(User, new JsonSerializerOptions { WriteIndented = true })</code></pre>
    }
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "code")]
    public string OAuthcode { get; set; } = string.Empty;

    private LineUserProfile User;
    private bool IsLineNotifyBinded;
    private string clientId = "1657569063";
    private string clientSecret = "16aaf2ce72d3f63df9cfa67905b9a4d5";
    private string redirectUri = "https://poychang.github.io/oauth-homework/";
    private string accesstoken = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(OAuthcode))
        {
            accesstoken = await lineLoginService.FetchLineLoginAccessTokenAsync(OAuthcode, clientId, clientSecret, redirectUri);
            await JS.InvokeVoidAsync("localStorage.setItem", "LineLoginAccessToken", accesstoken);
        }

        accesstoken = await JS.InvokeAsync<string>("localStorage.getItem", "LineLoginAccessToken");
        if (!string.IsNullOrEmpty(accesstoken)) User = await lineLoginService.FetchLineUserProfileAsync(accesstoken);
    }

    public async Task Logout()
    {
        var accesstoken = await JS.InvokeAsync<string>("localStorage.getItem", "LineLoginAccessToken");
        await lineLoginService.RevokeAccessTokenAsync(accesstoken, clientId, clientSecret);
        await JS.InvokeVoidAsync("localStorage.removeItem", "LineLoginAccessToken");
    }
}