@page "/"
@using System.Text.Json
@using LineOAuthWebApp.Models
@using System.Net.Http.Headers
@inject IJSRuntime JS
@inject IHttpClientFactory httpClientFactory

<div class="text-center">
    @if (user is null)
    {
        <h1 class="display-4">Welcome</h1>
        <p>
            <a href="@LineLoginUrl()">LINE Login</a>
        </p>
    }
    else
    {
        <p><img src="@user.PictureUrl" width="128" height="128" /></p>
        <h1 class="display-4">Hi, @user.DisplayName</h1>
        <h2>@user.Sub</h2>

        @if (IsLineNotifyBinded)
        {
            <a class="btn btn-warning">取消 Line Notify 通知</a>
        }
        else
        {
            <a class="btn btn-success">訂閱 Line Notify 通知</a>
        }
        <a class="btn btn-danger" @onclick="@RevokeAccessTokenAsync">登出</a>

        <pre><code>@JsonSerializer.Serialize(user, new JsonSerializerOptions { WriteIndented = true })</code></pre>
    }
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "code")]
    public string OAuthcode { get; set; }

    private LineUserProfile user;
    private bool IsLineNotifyBinded;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(OAuthcode)) await JS.InvokeVoidAsync("localStorage.setItem", "LineLoginAccessToken", await FetchLineLoginAccessTokenAsync(OAuthcode));

        var lineLoginAccessToken = await JS.InvokeAsync<string>("localStorage.getItem", "LineLoginAccessToken");
        if (!string.IsNullOrEmpty(lineLoginAccessToken)) user = await FetchLineUserProfileAsync(lineLoginAccessToken);
    }

    private string clientId = "1657569063";
    private string clientSecret = "16aaf2ce72d3f63df9cfa67905b9a4d5";
    private string redirectUri = "https://poychang.github.io/oauth-homework/";

    public string LineLoginUrl()
    {
        var state = "state";
        var url = $"https://access.line.me/oauth2/v2.1/authorize?response_type=code&client_id={clientId}&redirect_uri={redirectUri}&state={state}&scope=openid%20profile";
        return url;
    }

    public async Task<string> FetchLineLoginAccessTokenAsync(string code)
    {
        var httpClient = httpClientFactory.CreateClient("LineLoginClient");
        var endpoint = "https://api.line.me/oauth2/v2.1/token";
        var response = await httpClient.PostAsync(endpoint, new FormUrlEncodedContent(new Dictionary<string, string>
            {
                { "grant_type", "authorization_code" },
                { "code", code },
                { "client_id", clientId },
                { "client_secret", clientSecret },
                { "redirect_uri", redirectUri }
            }));
        response.EnsureSuccessStatusCode();
        var responseStream = await response.Content.ReadAsStreamAsync();

        return JsonSerializer.Deserialize<LineLoginAccessToken>(responseStream).AccessToken;
    }

    public async Task<LineUserProfile> FetchLineUserProfileAsync(string accessToken)
    {
        var httpClient = httpClientFactory.CreateClient("LineLoginClient");
        var endpoint = "https://api.line.me/v2/profile";
        var request = new HttpRequestMessage(HttpMethod.Get, endpoint);
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
        var response = await httpClient.SendAsync(request);
        response.EnsureSuccessStatusCode();
        var responseStream = await response.Content.ReadAsStreamAsync();

        return JsonSerializer.Deserialize<LineUserProfile>(responseStream);
    }

    public async Task RevokeAccessTokenAsync()
    {
        var lineLoginAccessToken = await JS.InvokeAsync<string>("localStorage.getItem", "LineLoginAccessToken");
        var httpClient = httpClientFactory.CreateClient("LineLoginClient");
        var endpoint = "https://api.line.me/oauth2/v2.1/revoke";
        var response = await httpClient.PostAsync(endpoint, new FormUrlEncodedContent(new Dictionary<string, string>
            {
                { "access_token", lineLoginAccessToken },
                { "client_id", clientId },
                { "client_secret", clientSecret }
            }));
        response.EnsureSuccessStatusCode();

        await JS.InvokeVoidAsync("localStorage.removeItem", "LineLoginAccessToken");
    }
}